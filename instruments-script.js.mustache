
#import "/Users/jackson/Projects/testo/mechanic.js"


var _message;
var _aTestIsRunning;


var _addArgumentsToMessage = function (msg, args) {
	if (args.length > 0) {
    	for (var i = 0; i < args.length; i++) {
    		msg [i] = JSON.stringify (args [i]);
    	}
    }	
};

var next = function () {
	UIALogger.logDebug ('called next');

	_message = { cmd: 'next' };
	_addArgumentsToMessage (_message, arguments);
	_aTestIsRunning = false;
};

var fail = function (reason) {
	UIALogger.logDebug ('called fail');

	_message = { cmd: 'failed' };
	_addArgumentsToMessage (_message, arguments);
	_aTestIsRunning = false;
};

var getNextMessage = function () {

	UIALogger.logDebug ('getting next');

    var target = UIATarget.localTarget();
    var host = target.host();
    
    var data = 	{};

    // The arugments sent to curl
    var args = [];
   	args.push ("-d '" + JSON.stringify (_message) + "'");
	args.push ('http://127.0.0.1:3000/sl/next');

	var result = null;
    var waiting = true;
    while (waiting) {
    	// TODO: figure out what error we get from this method on timeout. We already handle curl's timeout
    	// but we need to handle the hosts timeout too.
	    var result = host.performTaskWithPathArgumentsTimeout("/usr/bin/curl", args, 100);

	    // timeout error, just retry
	    if (result.exitCode == 28) {
	    	continue;
	    }

	    if (result.exitCode != 0) {
	        UIALogger.logDebug("exitCode: " + result.exitCode);
	    	UIALogger.logDebug ('FUCKING FUCK');
	    	return { cmd: 'failure' };
	    }
	    
	    if (result.stdout.length > 0) {
	        UIALogger.logDebug ("stdout: " + result.stdout);
	        result = JSON.parse (result.stdout);
	    	break;
	    }
	}

	return result;
};

var _beginTest = function () {
	_aTestIsRunning = true;
	_messageArguments = null;
};

var _testRunningTick = function () {
	if (!_aTestIsRunning)
		return;
	UIATarget.localTarget ().delay (1);	
};

var runLoop = function () {

	UIALogger.logDebug ('starting runloop');

	var running = true;
	var target = UIATarget.localTarget ();
	var app = target.frontMostApp ();
	
	do {
		var _msg = getNextMessage ();
		
		if (_msg.cmd == 'exit') {
			UIALogger.logDebug ('exiting test');
			break;
		}

		if (_msg.cmd == 'failure') {
			UIALogger.logDebug ('Unable to communicate with the host.')
			break;
		}
		
		if (_msg.cmd == 'func') {
			_beginTest ();
			
			do {
				var _testFunc;
				
				try {
					eval ('_testFunc = ' + _msg.func + ';');
				} catch (_err) {
					fail ('error evaluating test: ' + _err);
				}
				try {
					_testFunc (target, app, next);
				} catch (_err) {
					fail ('error executing test' + _err);
				} 
				
				_testRunningTick ();
			} while (_aTestIsRunning);
		}
	} while (running);
};

runLoop ();




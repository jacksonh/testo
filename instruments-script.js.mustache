
#import "/Users/jackson/Projects/testo/mechanic.js"
#import "/Users/jackson/Projects/testo/console.js"


var console = new Console ();

var timeoutHead;
var setTimeout = function (func, ms) {
	console.log ('setting a timeout: ' + func);
	var expires = new Date ().getTime ();
	var t = {
		func: func,
		expires: expires
	};

	if (!timeoutHead) {
		timeoutHead = t;
		return t;
	}

	if (expires < timeoutHead.expires) {
		t.next = timeoutHead;
		timeoutHead = t;
	}

    var prev = timeoutHead;
    var c = prev.next;
    while (c) {
    	if (c.expires > expires) {
    		break;
    	}
    }

    t.next = prev.next;
    prev.next = t;

	return t;
};

var clearTimeout = function (t) {
	
};

var fireTimeouts = function () {
	var fire = [];
	var time = new Date ().getTime ();

	var c;
	for (c = timeoutHead; c; c = c.next) {
		if (c.expires > time)
			break;
		fire.push (c);
	}
	timeoutHead = c;
	console.log ('new timeoutHead: ' + c);
	console.log ('number of timeouts to fire:  ' + fire.length);

	for (var i = 0; i < fire.length; i++) {
		fire [i].func ();
	}
};


var _message;
var _aTestIsRunning;

var _addArgumentsToMessage = function (msg, args) {
	if (args.length > 0) {
    	for (var i = 0; i < args.length; i++) {
    		msg [i] = JSON.stringify (args [i]);
    	}
    }
};

var next = function () {
	console.log ('called next');

	_message = { cmd: 'next' };
	_addArgumentsToMessage (_message, arguments);
	_aTestIsRunning = false;
};

var fail = function (reason) {
	console.log ('called fail:  ' + reason);

	_message = { cmd: 'failed' };
	_addArgumentsToMessage (_message, arguments);
	_aTestIsRunning = false;
};

var getNextMessage = function () {

	console.log ('getting next');

    var target = UIATarget.localTarget();
    var host = target.host();
    
    var data = 	{};

    // The arugments sent to curl
    var args = [];
   	args.push ("-d '" + JSON.stringify (_message) + "'");
	args.push ('http://127.0.0.1:3000/sl/next');

	var result = null;
    var waiting = true;
    while (waiting) {
    	// TODO: figure out what error we get from this method on timeout. We already handle curl's timeout
    	// but we need to handle the hosts timeout too.
	    var result = host.performTaskWithPathArgumentsTimeout("/usr/bin/curl", args, 100);

	    // timeout error, just retry
	    if (result.exitCode == 28) {
	    	continue;
	    }

	    if (result.exitCode != 0) {
	        console.log ('exitCode: ' + result.exitCode);
	    	return { cmd: 'failure' };
	    }
	    
	    if (result.stdout.length > 0) {
	        console.log ('stdout:  ' + result.stdout);
	        result = JSON.parse (result.stdout);
	    	break;
	    }
	}

	return result;
};

var _beginTest = function () {
	_aTestIsRunning = true;
	_messageArguments = null;
};

var _testRunningTick = function () {
	fireTimeouts ();

	if (!_aTestIsRunning)
		return;
	UIATarget.localTarget ().delay (1);	
};

var runLoop = function () {

	console.log ('starting runloop');

	var running = true;
	var target = UIATarget.localTarget ();
	var app = target.frontMostApp ();
	
	do {
		var _msg = getNextMessage ();
		
		if (_msg.cmd == 'exit') {
			console.log ('exiting test');
			break;
		}

		if (_msg.cmd == 'failure') {
			console.log ('Unable to communicate with the host.')
			break;
		}
		
		if (_msg.cmd == 'func') {
			_beginTest ();
			
			var _testFunc;
				
			try {
				eval ('_testFunc = ' + _msg.func + ';');
				_testFunc.apply (null, [target, app, next]);
			} catch (_err) {
				fail ('error executing test' + _err);
			} 

			do {
				
				
				_testRunningTick ();
			} while (_aTestIsRunning);
		}
	} while (running);
};

runLoop ();





#import "/Users/jackson/Projects/testo/mechanic.js"

{{ imports }}

var testFunc;
var inTest = true;

var next = function () {
	inTest = false;
};

var getNext = function () {

	UIALogger.logDebug ('getting next');

    var target = UIATarget.localTarget();
    var host = target.host();
    
    var data = 	{};

    if (arguments.length > 0) {
    	data.nargs = [];
    	for (var i = 0; i < arguments.length; i++) {
    		data.nargs [i] = JSON.stringify (arguments [i]);
    	}
    }

    // The arugments sent to curl
    var args = [];
   	args.push ("-d '" + JSON.stringify (data) + "'");
	args.push ('http://127.0.0.1:3000/sl/next');

	var result = null;
    var waiting = true;
    while (waiting) {
    	// TODO: figure out what error we get from this method on timeout. We already handle curl's timeout
    	// but we need to handle the hosts timeout too.
	    var result = host.performTaskWithPathArgumentsTimeout("/usr/bin/curl", args, 100);

	    // timeout error, just retry
	    if (result.exitCode == 28) {
	    	continue;
	    }

	    if (result.exitCode != 0) {
	        UIALogger.logDebug("exitCode: " + result.exitCode);
	        UIALogger.logDebug("stdout: " + result.stdout);
	        UIALogger.logDebug("stderr: " + result.stderr);
	    
	        throw 'Unable to send host message.';
	    }
	    
	    if (result.stdout.length > 0) {
	        UIALogger.logDebug ("stdout: " + result.stdout);
	        result = JSON.parse (result.stdout);
	    	break;
	    }
	}

	// TODO:
	// yield { cmd: 'func', func: 'function () { UIALogger.logDebug ("first"); next (); }' };
	// yield { cmd: 'func', func: 'function () { UIALogger.logDebug ("second"); next (); }' };
	// yield { cmd: 'exit' };

	return result;
};


var next = function () {

    var data = 	{};

    if (arguments.length > 0) {
    	data.nargs = [];
    	for (var i = 0; i < arguments.length; i++) {
    		data.nargs [i] = JSON.stringify (arguments [i]);
    	}
    }

    getNext (data);
};

var failed = function (reason) {

	var data = {};
	data.nerror = reason;

	getNext (data);
};

var runLoop = function () {

	var running = true;
	do {
		var intest = true;
		var theTest = getNext ();
		if (theTest.cmd == 'exit')
			break;
		do {
			eval ('var testFunc = ' + theTest.func + ';');
			testFunc ();
		} while (intest);
	} while (running);
};

runLoop ();



